#!/bin/bash

readonly ME="$(basename "$0" .sh)"

############### <FUNCTIONS> ###############
# Function to call when we bail out
die()
{
    echo "$ME: $1. Exit" >&2
    test -n "$2" && exit $2
    exit 1
}

# run a SQL command.
# Parameter 1: SQL request. If it's a valid file, run it's content
# Parameter 2: if set, do not bail out on error
# output: tab-separated data
# exit code 0: request successful
runsql()
{
    test -z "$1" && die "Empty SQL request"
    local SQPROG='echo'
    test -f "$1" && SQPROG='cat'
    if [ -z "$2" ]; then $SQPROG "$1" | mysql -h"$SQLHOST" -u"$SQLUSER" -p"$SQLPASS" -D"$SQLDB" -s --skip-column-names  || die "Failed query: '$1'" # Fix your junk !
		    else $SQPROG "$1" | mysql -h"$SQLHOST" -u"$SQLUSER" -p"$SQLPASS" -D"$SQLDB" -s --skip-column-names  2>&1 # We want the error
    fi
}

# This will make a fresh install of the database.
# Can also be used to restore a backup if a file is specified as parameter.
installzoppas()
{
    test -z "$1" && SQLINSTALL="./zoppas-install.sql" && echo "This is a fresh install"
    test -n "$1" && SQLINSTALL="$1" && echo "This is a database restore"
    test -f "$SQLINSTALL" || die "File $SQLINSTALL not found"
    runsql "$SQLINSTALL"
}

# Perform a backup of the database
# Parameter 1: destination filename
db_dump()
{
    test -z "$1" && die "Specify destination file for backup"
    mysqldump -h"$SQLHOST" -u"$SQLUSER" -p"$SQLPASS" --routines --triggers --hex-blob --add-drop-database --add-drop-table --flush-privileges --databases "$SQLDB" > "$1"
}

# Add a product to the database (CRUDE AND NEEDS REWRITE)
zoppasnewproduct()
{
    read -p "Brief product description (mandatory): " PRODUCT_DESCRIPTION
    test -z "$PRODUCT_DESCRIPTION" && die "No description given"
    read -p "Longer description (optional): " LONG_DESCRIPTION
    read -p "Product category (optional): " PRODUCT_CATEGORY
    read -p "Initial stock quantity: " PRODUCT_QUANTITY
    read -p "Barcode identifier: " PRODUCT_BARCODE
    read -p "Purchasing price: " PURCHASING_PRICE
    read -p "Default Selling price: " SELLING_PRICE
    test -z "$PURCHASING_PRICE" && PURCHASING_PRICE='0'
#    runsql "insert into products (description, shortdescription, category, stock_quantity) VALUES ( '$LONG_DESCRIPTION', '$PRODUCT_DESCRIPTION', '$PRODUCT_CATEGORY', $PRODUCT_QUANTITY )"
#    runsql "insert into barcodes (product_id, barcode) VALUES ((select max(product_id) from products), '$PRODUCT_BARCODE')"
    runsql "insert into price (product_id, price_purchase, price_sell, price_validfrom) VALUES ((select max(product_id) from products), $PURCHASING_PRICE, $SELLING_PRICE, curdate() )"
}

zoppaslistprod()
{
    for i in $(runsql "select product_id from products"); do
	echo "Product ID: $i"
    done
}

############### CONFIG FILE ###############
# Look for config file in the following locations: /etc, user directory and 
# script directory. Script directory always wins.
readonly ZOPPAS='zoppas'
test -e "/etc/$ZOPPAS.conf" && CONFIGFILE="/etc/$ZOPPAS.conf"
test -e "$HOME/$ZOPPAS.conf" && CONFIGFILE="$HOME/$ZOPPAS.conf"
test -e "$ZOPPAS.conf" && CONFIGFILE="$ZOPPAS.conf"
test -z "$CONFIGFILE" && die "No config file found"
# Bring the config file
# Load config file and check sanity
test -f "$CONFIGFILE" || die "No config file found ($CONFIGFILE)"
. $CONFIGFILE
test -n "$SQLUSER" || die "$CONFIGFILE: SQLUSER variable is empty"
test -n "$SQLPASS" || die "$CONFIGFILE: SQLPASS variable is empty"
test -n "$SQLDB" || die "$CONFIGFILE: SQLDB: Database to use not specified"
test -n "$ORGNAME" || die "$CONFIGFILE: ORGNAME: Organisation name is not set"
# By default we talk in euros
test -n "$CURRENCY" || CURRENCY="EUR"
# If empty, use localhost
test -n "$SQLHOST" || SQLHOST="127.0.0.1"

case "$1" in
    'install')
	installzoppas "$2"
	;;
    'importoldcsv')
	echo "Stabilize database format first! :-) "
	;;
    'newprod')
	zoppasnewproduct
	;;
    'modifyprod')
	echo
	;;
    'listprod')
	zoppaslistprod
	;;
    'lookup')
	lookup-barcode "$2"
	;;
    'backup')
	db_dump "$2"
	;;
    'runsql')
	runsql "$2"
	;;
    *)
	echo "Specify the main action (install|newprod|modifyprod|lookup|..."
	;;
esac
